apply plugin: "org.jetbrains.kotlin.jvm"

sourceCompatibility = "${jvmVersion}"
targetCompatibility = "${jvmVersion}"

repositories {
    jcenter()
    flatDir {
        dirs rootProject.file('external-libs')
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "${jvmVersion}"
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "${jvmVersion}"
    }
}

if (file("src/testing").exists()) {
    configurations {
        testingCompile.extendsFrom(compile)
        testingImplementation.extendsFrom(implementation)
        testingRuntime.extendsFrom(runtime)
        testingRuntimeOnly.extendsFrom(runtimeOnly)

        testCompile.extendsFrom(testingCompile)
        testImplementation.extendsFrom(testingImplementation)
        testRuntime.extendsFrom(testingRuntime)
        testRuntimeOnly.extendsFrom(testingRuntimeOnly)

        testingElements.extendsFrom(testingCompile, testingRuntime)
    }

    sourceSets {
        testing {
            compileClasspath = main.output + configurations.testingCompileClasspath
            runtimeClasspath = output + main.output + configurations.testingRuntimeClasspath
        }

        test {
            compileClasspath = main.output + testing.output + configurations.testCompileClasspath
            runtimeClasspath = output + main.output + testing.output + configurations.testRuntimeClasspath
        }
    }

    compileTestingKotlin {
        kotlinOptions {
            jvmTarget = "${jvmVersion}"
        }
    }

    task testingJar(type: Jar) {
        from sourceSets.testing.output
        classifier = "testing"
    }

    artifacts {
        testingElements testingJar
    }
}

test {
    exclude 'smoke/**/*'
    exclude 'cdctest/**/*'
    exclude 'externalintegrationtest/**/*'
}

task externalAndCdcs(type: Test) {
    include 'cdctest/**/*'
    include 'externalintegrationtest/**/*'

    testLogging {
        exceptionFormat = 'full'
    }

    afterTest { descriptor, result ->
        println "CDC [$result] $descriptor.className: $descriptor.displayName"
        if (result.resultType.toString() == "FAILURE"){
            println "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
            println result.exceptions
            result.exception.stackTrace.each{ l -> println l }
            println "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
        }
    }
}

dependencies {
    compile libraries["jsr-305"]
    compile libraries["kotlin"]
    compile libraries["kotlinx-coroutines"]

    testCompile libraries["hamcrest-core"]
    testCompile libraries["hamcrest-library"]
    testCompile libraries["hamkrest"]
    testCompile libraries["jmock"]
    testCompile libraries["jmock-junit"]
    testCompile libraries["junit"]
    testCompile libraries["kotlin-reflect"]
}
